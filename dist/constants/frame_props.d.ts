export declare const xyFrameDataProps: string[];
export declare const xyFrameChangeProps: string[];
export declare const orFrameChangeProps: string[];
export declare const networkFrameChangeProps: string[];
export declare const xyframeproptypes: {
    lines: boolean;
    points: boolean;
    summaries: boolean;
    axes: boolean;
    matte: boolean;
    xScaleType: boolean;
    yScaleType: boolean;
    xExtent: boolean;
    yExtent: boolean;
    invertX: boolean;
    invertY: boolean;
    xAccessor: boolean;
    yAccessor: boolean;
    lineDataAccessor: boolean;
    summaryDataAccessor: boolean;
    lineType: boolean;
    summaryType: boolean;
    lineRenderMode: boolean;
    pointRenderMode: boolean;
    summaryRenderMode: boolean;
    showLinePoints: boolean;
    showSummaryPoints: boolean;
    defined: boolean;
    lineStyle: boolean;
    pointStyle: boolean;
    summaryStyle: boolean;
    lineClass: boolean;
    pointClass: boolean;
    areaClass: boolean;
    summaryClass: boolean;
    canvasPoints: boolean;
    canvasLines: boolean;
    canvasAreas: boolean;
    canvasSummaries: boolean;
    customPointMark: boolean;
    customLineMark: boolean;
    customAreaMark: boolean;
    customSummaryMark: boolean;
    lineIDAccessor: boolean;
    minimap: boolean;
    useSummariesAsInteractionLayer: boolean;
    filterRenderedLines: boolean;
    useSpans: boolean;
    title: boolean;
    margin: boolean;
    name: boolean;
    dataVersion: boolean;
    frameKey: boolean;
    size: boolean;
    position: boolean;
    canvasPostProcess: boolean;
    additionalDefs: boolean;
    className: boolean;
    customHoverBehavior: boolean;
    customClickBehavior: boolean;
    customDoubleClickBehavior: boolean;
    hoverAnnotation: boolean;
    disableContext: boolean;
    interaction: boolean;
    svgAnnotationRules: boolean;
    htmlAnnotationRules: boolean;
    tooltipContent: boolean;
    optimizeCustomTooltipPosition: boolean;
    annotations: boolean;
    baseMarkProps: boolean;
    backgroundGraphics: boolean;
    foregroundGraphics: boolean;
    beforeElements: boolean;
    afterElements: boolean;
    annotationSettings: boolean;
    renderKey: boolean;
    renderOrder: boolean;
    legend: boolean;
    onUnmount: boolean;
    sketchyRenderingEngine: boolean;
    interactionSettings: boolean;
    frameRenderOrder: boolean;
};
export declare const ordinalframeproptypes: {
    data: boolean;
    oScaleType: boolean;
    rScaleType: boolean;
    oExtent: boolean;
    rExtent: boolean;
    invertO: boolean;
    invertR: boolean;
    oAccessor: boolean;
    rAccessor: boolean;
    oPadding: boolean;
    projection: boolean;
    type: boolean;
    summaryType: boolean;
    connectorType: boolean;
    tooltipContent: boolean;
    optimizeCustomTooltipPosition: boolean;
    baseMarkProps: boolean;
    dataAccessor: boolean;
    rBaseline: boolean;
    sortO: boolean;
    oSort: boolean;
    pixelColumnWidth: boolean;
    dynamicColumnWidth: boolean;
    renderMode: boolean;
    summaryRenderMode: boolean;
    connectorRenderMode: boolean;
    style: boolean;
    connectorStyle: boolean;
    summaryStyle: boolean;
    canvasPieces: boolean;
    canvasConnectors: boolean;
    canvasSummaries: boolean;
    summaryPosition: boolean;
    oLabel: boolean;
    pieceIDAccessor: boolean;
    pieceHoverAnnotation: boolean;
    summaryHoverAnnotation: boolean;
    axes: boolean;
    ordinalAlign: boolean;
    multiAxis: boolean;
    pieceClass: boolean;
    summaryClass: boolean;
    useSpans: boolean;
    title: boolean;
    margin: boolean;
    name: boolean;
    dataVersion: boolean;
    frameKey: boolean;
    size: boolean;
    position: boolean;
    canvasPostProcess: boolean;
    additionalDefs: boolean;
    className: boolean;
    customHoverBehavior: boolean;
    customClickBehavior: boolean;
    customDoubleClickBehavior: boolean;
    hoverAnnotation: boolean;
    disableContext: boolean;
    interaction: boolean;
    svgAnnotationRules: boolean;
    htmlAnnotationRules: boolean;
    annotations: boolean;
    backgroundGraphics: boolean;
    foregroundGraphics: boolean;
    beforeElements: boolean;
    afterElements: boolean;
    annotationSettings: boolean;
    renderKey: boolean;
    renderOrder: boolean;
    legend: boolean;
    onUnmount: boolean;
    sketchyRenderingEngine: boolean;
    interactionSettings: boolean;
    frameRenderOrder: boolean;
};
export declare const networkframeproptypes: {
    nodes: boolean;
    edges: boolean;
    graph: boolean;
    nodeIDAccessor: boolean;
    sourceAccessor: boolean;
    targetAccessor: boolean;
    nodeSizeAccessor: boolean;
    customNodeIcon: boolean;
    customEdgeIcon: boolean;
    nodeRenderKey: boolean;
    edgeRenderKey: boolean;
    edgeRenderMode: boolean;
    nodeRenderMode: boolean;
    canvasEdges: boolean;
    canvasNodes: boolean;
    nodeLabels: boolean;
    edgeWidthAccessor: boolean;
    networkType: boolean;
    renderFn: boolean;
    nodeStyle: boolean;
    edgeStyle: boolean;
    edgeType: boolean;
    filterRenderedNodes: boolean;
    useSpans: boolean;
    title: boolean;
    margin: boolean;
    name: boolean;
    dataVersion: boolean;
    frameKey: boolean;
    size: boolean;
    position: boolean;
    canvasPostProcess: boolean;
    additionalDefs: boolean;
    className: boolean;
    customHoverBehavior: boolean;
    customClickBehavior: boolean;
    customDoubleClickBehavior: boolean;
    hoverAnnotation: boolean;
    disableContext: boolean;
    interaction: boolean;
    svgAnnotationRules: boolean;
    htmlAnnotationRules: boolean;
    tooltipContent: boolean;
    optimizeCustomTooltipPosition: boolean;
    annotations: boolean;
    baseMarkProps: boolean;
    backgroundGraphics: boolean;
    foregroundGraphics: boolean;
    beforeElements: boolean;
    afterElements: boolean;
    annotationSettings: boolean;
    renderKey: boolean;
    renderOrder: boolean;
    legend: boolean;
    onUnmount: boolean;
    sketchyRenderingEngine: boolean;
    interactionSettings: boolean;
    frameRenderOrder: boolean;
};
export declare const responsiveprops: {
    responsiveWidth: boolean;
    responsiveHeight: boolean;
    debounce: boolean;
};
